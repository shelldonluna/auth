para esta aplicacion de authorization
es basicamente crear usuarios y permitirles el acceso a la aplicacion
utiliza varias librerias 

const express = require('express')
const mongoose = require('mongoose')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const expressJwt = require('express-jwt')

npm i -S express
tomar ese ejemplo que es la libreria para usar la conexiÃ³n hacia mongo
de todas maneras las dependencias se pueden ver en el 
archivo package.json


asi es como el middle ware se crea al principio 
la primera funcion asigna a la variable req.user el objeto { id: 'lele'}
y manda ejecutar la siguiente funcion con next()
la siguiente funcion manda un console log con 'lala' y el valor de req.user
{ id: 'lele' }
y la respuesta del endpoint  ok 

app.get('/lele', (req, res, next) =>{
    req.user = { id: 'lele'}
    next()
}, (req,res,next) => {
    console.log('lala', req.user)
    res.send('ok')
})

posteriormente se cambia tomando en cuenta el middleware expressJwt

aqui se declara la funcion validateJwt 
const validateJwt = expressJwt({ secret: 'mi-string-secreto', algorithms: ['HS256']})

la cual basicamente reemplaza la funcion
(req, res, next) =>{
    req.user = { id: 'lele'}
    next()
},
y termina de esta manera

app.get('/lele',validateJwt, (req, res, next) =>{
    console.log('lala', req.auth)
    res.send('ok')
})


aqui podemos ver que el req.auth cambio en lugar de req.user, esto es porque 
el middleware cambio de version 


app.get ('/lele',  validateJwt, async (req,res,next ) => {
    try {
        const user = await User.findById(req.auth._id)
        if (!user) {
            return res.status(401).end()
        }
        req.auth = user
        next()
    } catch (e) {
        next(e)
    }
}, (req,res) => {
    res.send(req.auth)
}
 )